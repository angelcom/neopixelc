
namespace neopixelc {

    let ASCII: number[] =              // ASCII
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // - -
            0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, // -!-        
            0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, // -"-        
            0x50, 0x50, 0xF8, 0x50, 0xF8, 0x50, 0x50, 0x00, // -#-        
            0x20, 0x78, 0xC0, 0x70, 0x28, 0xF0, 0x20, 0x00, // -$-        
            0xC0, 0xC8, 0x10, 0x20, 0x40, 0x98, 0x18, 0x00, // -%-        
            0x40, 0xA0, 0xA0, 0x40, 0xA8, 0x90, 0x68, 0x00, // -&-        
            0x30, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // -'-        
            0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10, 0x00, // -(-        
            0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00, // -)-        
            0x20, 0xA8, 0x70, 0x20, 0x70, 0xA8, 0x20, 0x00, // -*-        
            0x20, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x00, // -+-        
            0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x80, 0x00, // -,-        
            0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, // ---        
            0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, // -.-        
            0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, // -/-        
            0x70, 0x88, 0x98, 0xA8, 0xC8, 0x88, 0x70, 0x00, // -0-        
            0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, // -1-        
            0x70, 0x88, 0x08, 0x30, 0x40, 0x80, 0xF8, 0x00, // -2-        
            0xF8, 0x08, 0x10, 0x30, 0x08, 0x88, 0x70, 0x00, // -3-        
            0x10, 0x30, 0x50, 0x90, 0xF8, 0x10, 0x10, 0x00, // -4-        
            0xF8, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70, 0x00, // -5-        
            0x38, 0x40, 0x80, 0xF0, 0x88, 0x88, 0x70, 0x00, // -6-        
            0xF8, 0x08, 0x10, 0x20, 0x40, 0x40, 0x40, 0x00, // -7-        
            0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00, // -8-        
            0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0xE0, 0x00, // -9-        
            0x00, 0x60, 0x60, 0x00, 0x60, 0x60, 0x00, 0x00, // -:-        
            0x00, 0x60, 0x60, 0x00, 0x60, 0x60, 0x80, 0x00, // -;-        
            0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x00, // -<-        
            0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00, // -=-        
            0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00, // ->-        
            0x70, 0x88, 0x10, 0x20, 0x20, 0x00, 0x20, 0x00, // -?-        
            0x70, 0x88, 0xB8, 0xA8, 0xB8, 0x80, 0x78, 0x00, // -@-        
            0x20, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00, // -A-        
            0xF0, 0x88, 0x88, 0xF0, 0x88, 0x88, 0xF0, 0x00, // -B-        
            0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00, // -C-        
            0xF0, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF0, 0x00, // -D-        
            0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8, 0x00, // -E-        
            0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, // -F-        
            0x70, 0x88, 0x80, 0x80, 0xB8, 0x88, 0x78, 0x00, // -G-        
            0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00, // -H-        
            0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, // -I-        
            0x38, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60, 0x00, // -J-        
            0x88, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x88, 0x00, // -K-        
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, // -L-        
            0x88, 0xD8, 0xA8, 0xA8, 0x88, 0x88, 0x88, 0x00, // -M-        
            0x88, 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88, 0x00, // -N-        
            0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, // -O-        
            0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80, 0x00, // -P-        
            0x70, 0x88, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00, // -Q-        
            0xF0, 0x88, 0x88, 0xF0, 0xA0, 0x90, 0x88, 0x00, // -R-        
            0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00, // -S-        
            0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // -T-        
            0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, // -U-        
            0x88, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, // -V-        
            0x88, 0x88, 0x88, 0xA8, 0xA8, 0xD8, 0x88, 0x00, // -W-        
            0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00, // -X-        
            0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20, 0x00, // -Y-        
            0xF8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, // -Z-        
            0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xF0, 0x00, // -[-        
            0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, // -\-        
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, // -]-        
            0x20, 0x70, 0xA8, 0x20, 0x20, 0x20, 0x20, 0x00, // -^-        
            0x00, 0x20, 0x40, 0xF8, 0x40, 0x20, 0x00, 0x00, // -_-        
            0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // -`-        
            0x00, 0x00, 0xE0, 0x10, 0x70, 0x90, 0x68, 0x00, // -a-        
            0x80, 0x80, 0xB0, 0xC8, 0x88, 0xC8, 0xB0, 0x00, // -b-        
            0x00, 0x00, 0x70, 0x88, 0x80, 0x80, 0x70, 0x00, // -c-        
            0x08, 0x08, 0x68, 0x98, 0x88, 0x98, 0x68, 0x00, // -d-        
            0x00, 0x00, 0x70, 0x88, 0xF0, 0x80, 0x70, 0x00, // -e-        
            0x30, 0x48, 0x40, 0xF0, 0x40, 0x40, 0x40, 0x00, // -f-        
            0x00, 0x00, 0x70, 0x88, 0x88, 0x78, 0x08, 0xF0, // -g-        
            0x80, 0x80, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x00, // -h-        
            0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // -i-        
            0x10, 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x60, // -j-        
            0x80, 0x80, 0x90, 0xA0, 0xC0, 0xA0, 0x98, 0x00, // -k-        
            0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, // -l-        
            0x00, 0x00, 0x50, 0xA8, 0xA8, 0xA8, 0xA8, 0x00, // -m-        
            0x00, 0x00, 0xB0, 0x48, 0x48, 0x48, 0x48, 0x00, // -n-        
            0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, // -o-        
            0x00, 0x00, 0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, // -p-        
            0x00, 0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x08, // -q-        
            0x00, 0x00, 0xB0, 0x48, 0x40, 0x40, 0x40, 0x00, // -r-        
            0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0xF0, 0x00, // -s-        
            0x40, 0x40, 0xF8, 0x40, 0x40, 0x48, 0x30, 0x00, // -t-        
            0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x68, 0x00, // -u-        
            0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, // -v-        
            0x00, 0x00, 0xA8, 0xA8, 0xA8, 0xA8, 0x50, 0x00, // -w-        
            0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, // -x-        
            0x00, 0x00, 0x88, 0x88, 0x98, 0x68, 0x08, 0xF0, // -y-        
            0x00, 0x00, 0xF8, 0x10, 0x20, 0x40, 0xF8, 0x00, // -z-        
            0x20, 0x40, 0x40, 0x80, 0x40, 0x40, 0x20, 0x00, // -{-        
            0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, // -|-        
            0x20, 0x10, 0x10, 0x08, 0x10, 0x10, 0x20, 0x00, // -}-        
            0x00, 0x00, 0x40, 0xA8, 0x10, 0x00, 0x00, 0x00, // -~-        
            0xA8, 0x50, 0xA8, 0x50, 0xA8, 0x50, 0xA8, 0x00, // --       
        ];

    function get_char_buf(a: string): Buffer {
        let buf = pins.createBuffer(a.length * 8);
        for (let i = 0; i < a.length; i++) {
            for (let b = 0; b < 8; b++) {
                buf[b + i * 8] = ASCII[(a.charCodeAt(i) - 0x20) * 8 + b];
            }
        }
        return buf;
    }
    let randomColor = false;
    let ledColor = NeoPixelColors.Red;
    export function setColor(rand: boolean = false, color: NeoPixelColors = NeoPixelColors.Red) {
        randomColor = rand;
        ledColor = color;
    }

    export function showChars(item: neopixel.Strip, a: string, x: number, y: number, randcolor: boolean = false, color: NeoPixelColors = NeoPixelColors.Red) {
        setColor(randcolor, color);
        let buf = get_char_buf(a);
        let rowx = 0
        for (let charN = 0; charN < buf.length / 8; charN++) {
            for (let row = 0; row < 8; row++)
                for (let col = 0; col < 8; col++) {
                    if (buf[charN * 8 + row] & (0x80 >> col)) {

                        let xx = charN * 6 + col + x;
                        let yy = y + row;

                        let yyy = 0, pos = 0;

                        if (xx % 2) {
                            yyy = 7 - yy % 8;
                        }
                        else {
                            yyy = yy % 8;
                        }
                        pos = yyy + xx * 8 + (yy / 8) * 64 * 8;

                        if (randomColor)
                            item.setPixelColor(pos, neopixel.colors(neopixel.rgb(Math.random(200), Math.random(200), Math.random(200))))
                        else
                            item.setPixelColor(pos, neopixel.colors(ledColor))

                    }
                }
        }
    }
}